    ;; list of key codes in Karabiner:
    ;;   https://github.com/pqrs-org/Karabiner-Elements/issues/925
    ;; !  | mandatory  (not recursive) modifiers which must be pressed
    ;; #  | optional   (recursive) modifiers which can be pressed
    ;; ## | optional any

    ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and optional
    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; !! | command + control + optional + shift (hyper)
    ;;
    ;; need to prefix C T O S F with ! or #



    ;; each manipulator has a description and multiple rules

    ;;{:des "..."                               ;; -> description
    ;; :rules[
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 1
    ;;          [<from>  <to>  <conditions>]    ;; -> rule 2
    ;; ]}

    ;; rule [:period ["period-mode" 1] nil {:afterup ["period-mode" 0] :alone :period}]
    ;;       |_____| |_______________| |_| |_________________________________________|
    ;;        <from>    <to>      <conditions>         <other options>
    ;;
    ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
    ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
    ;;

    ;; (custom variables) & modifiers -> Advanced
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable


; EXAMPLES:
; https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126

; KEYCODES
; https://github.com/pqrs-org/Karabiner-Elements/issues/925


{:profiles
 {:Default {:default true


         :sim     50   ;; simultaneous_threshold_milliseconds (def: 50)
                       ;; keys need to be pressed within this threshold to be considered simultaneous
         :delay   80   ;; to_delayed_action_delay_milliseconds (def: 500)
                       ;; basically it means time after which the key press is count delayed

         :alone   1000  ;; to_if_alone_timeout_milliseconds (def: 1000)
                       ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
         :held    70   ;; to_if_held_down_threshold_milliseconds (def: 500)
                       ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
         }
                ;:delay   500

                ;:alone   500

                ;:held    1000
  }

 :devices {
    :apple [
            {:vendor_id 1452}
            {:vendor_id 76}
    ]
  }

 :input-sources {:us {:input_source_id "com.apple.keylayout.US"}
               :dvorak {:input_source_id "com.apple.keylayout.Dvorak"}
               :russian {:input_source_id "com.apple.keylayout.Russian"}
               }

; osascript -e 'id of app "Slack"'
 :applications {
    :Emacs   ["^org\\.gnu\\.Emacs$"]
    :Chromes ["^com\\.google\\.Chrome$", "^org\\.chromium\\.Chromium$", "^com\\.google\\.Chrome\\.canary$"]
    :Slack   ["^com\\.tinyspeck\\.slackmacgap$"]
    :Kitty   ["^net\\.kovidgoyal\\.kitty$"]
    :Discord ["^com\\.hnc\\.Discord$"]
    :Finder ["^com\\.apple\\.finder$"]
    :Telegram ["^ru\\.keepcoder\\.Telegram$"]
 }

:tos {
             :select_us {:select_input_source
                               {
                                :input_source_id "com.apple.keylayout.US"
                                }}

             :select_ru {:select_input_source
                               {
                                :input_source_id "com.apple.keylayout.Russian"
                                }}

             :select_dvorak {:select_input_source
                               {
                                :input_source_id "com.apple.keylayout.Dvorak"
                                }}

}

:layers {
            :caps-mode {:key :caps_lock :alone {:key :escape}}
         }

:simlayers {
            ;terminal
            :x-mode {:key :x} ; TODO: maybe if I copy it and add S, xS= will work?
            ; chrome
            :c-mode {:key :c}
            ; spotify
            :s-mode {:key :s}
            ; emacs\pkm
            :z-mode {:key :z}
            ; ide
            :v-mode {:key :v}
            ; rest
            :w-mode {:key :w}
            ; db
            :d-mode {:key :d}
            ; finder
            :f-mode {:key :f}
            ; basic movements
            :space-mode {:key :spacebar}
            :emacs-space-mode {:key :spacebar :condi :Emacs}
            :chrome-space-mode {:key :spacebar :condi :Chromes}
            }

; example of how to debug specific targets: :emacs "TITLE=\"%s\"; LOGS=`${HOME}/dots/karabiner/focus_emacs_and_spawn_if_needed.sh ${TITLE}`; osascript -e \"display dialog \\\"test: ${LOGS}\\\"\""

 :templates {
             ; first focus space then focus window so that it doesn't show workspace switching animatio
             ; this periodically hangs for seconds seemingly because of https://github.com/koekeishiya/yabai/issues/599
             :app "APP=\"%s\"; TITLE=\"%s\"; /usr/local/bin/yabai -m space --focus $(/usr/local/bin/yabai -m query --windows | /usr/local/bin/jq \"[.[] | select(.app | contains(\\\"${APP}\\\")) | select(.title | contains(\\\"${TITLE}\\\")) | .space][0]\"); /usr/bin/open -a \"${APP}\"; /usr/local/bin/yabai -m window --focus $(/usr/local/bin/yabai -m query --windows | /usr/local/bin/jq \"[.[] | select(.app | contains(\\\"${APP}\\\")) | select(.title | contains(\\\"${TITLE}\\\")) | .id][0]\")"
             :open_app "/usr/bin/open -a \"%s\""
             ; this triggers MacOS'es default space switching animation if an app is in another desktop but at least never blocks
             ;:app "/usr/bin/open -a \"%s\""
             :emacs "TITLE=\"%s\"; ${HOME}/dots/karabiner/focus_emacs_and_spawn_if_needed.sh ${TITLE}"
             :focus_desktop "/usr/local/bin/yabai -m space --focus %d"
             :send_to_desktop "/usr/local/bin/yabai -m window --space %d"
             ;; https://github.com/koekeishiya/yabai/issues/83
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :test_mode "osascript -e 'display notification \"its me!\"'"}

:main [
       {:des "yabai"
        :rules [
                [:!C0 [:focus_desktop 1]]
                [:!SC0 [:send_to_desktop 1]]
                [:!Copen_bracket ["two screens" 1] ["two screens" 0] :dvorak]
                [:!Copen_bracket ["two screens" 0] ["two screens" 1] :dvorak]

                [:!Cx ["/usr/local/bin/yabai -m window --close"]]

                ; toggle floating and bring to center
                [:!Ce ["/usr/local/bin/yabai -m window --toggle float; /usr/local/bin/yabai -m window --grid 4:4:1:1:2:2"] :!dvorak]
                [:!Cd ["/usr/local/bin/yabai -m window --toggle float; /usr/local/bin/yabai -m window --grid 4:4:1:1:2:2"] :dvorak]

                ; rotate windows
                [:!Cr ["/usr/local/bin/yabai -m space --rotate 90"] :!dvorak]
                [:!Co ["/usr/local/bin/yabai -m space --rotate 90"] :dvorak]

                ; non-native fullscreen (ie only has effect if multiple windows are present)
                [:!Cspacebar ["/usr/local/bin/yabai -m window --toggle zoom-fullscreen"] :!dvorak]
                [:!Cspacebar ["/usr/local/bin/yabai -m window --toggle zoom-fullscreen"] :dvorak]

                ; move floating windows around
                [:!CQj ["yabai -m window --move rel:-100:0"] :dvorak]
                [:!CQp ["yabai -m window --move rel:100:0"] :dvorak]
                [:!CQc ["yabai -m window --move rel:0:100"] :dvorak]
                [:!CQv ["yabai -m window --move rel:0:-100"] :dvorak]

                ; resize floating windows
                [:!CSj ["yabai -m window --resize bottom_left:-100:0"] :dvorak]
                [:!CSp ["yabai -m window --resize bottom_right:100:0"] :dvorak]
                [:!CSc ["yabai -m window --resize bottom_left:0:100"] :dvorak]
                [:!CSv ["yabai -m window --resize top_left:0:-100"] :dvorak]
                [:!QSj ["yabai -m window --resize bottom_right:-100:0"] :dvorak]
                [:!QSp ["yabai -m window --resize bottom_left:100:0"] :dvorak]
                [:!QSc ["yabai -m window --resize top_left:0:100"] :dvorak]
                [:!QSv ["yabai -m window --resize bottom_left:0:-100"] :dvorak]

                ; navigate to floating windows - https://github.com/koekeishiya/yabai/issues/203#issuecomment-700527407
                [:!Cl ["yabai -m query --spaces --space | jq -re \".index\" | xargs -I{} yabai -m query --windows --space {} | jq -sre \"add | map(select(.minimized != 1)) | sort_by(.display, .frame.y, .frame.x, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id\" | xargs -I{} yabai -m window --focus {}"] :dvorak]
                [:!Cr ["yabai -m query --spaces --space | jq -re \".index\" | xargs -I{} yabai -m query --windows --space {} | jq -sre \"add | map(select(.minimized != 1)) | sort_by(.display, .frame.y, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id\" | xargs -I{} yabai -m window --focus {}"] :dvorak]

                ; window navigation - disable in emacs since it takes up the full screen and we manage it's windows instead
                [:!Cp ["/usr/local/bin/yabai -m window --focus east || /usr/local/bin/yabai -m window --focus next || /usr/local/bin/yabai -m window --focus first"] [:dvorak :!Emacs :!Kitty]]
                [:!Cj ["/usr/local/bin/yabai -m window --focus west || /usr/local/bin/yabai -m window --focus prev || /usr/local/bin/yabai -m window --focus last"] [:dvorak :!Emacs :!Kitty]]

                [:!Cj :!!j :Kitty]
                [:!Qj :vk_none :Kitty]
                [:!Qp :vk_none :Kitty]
                [:!Qk :vk_none :Kitty]
                [:!Ql :vk_none :Kitty]

                ; prevent MacOs "Hide App"
                [:!Qj :vk_none]
                ; can reconsider enabling them, but it breaks being able to cmd-k with one hand
                ;[:!Cc ["/usr/local/bin/yabai -m window --focus north"] :dvorak]
                ;[:!Cv ["/usr/local/bin/yabai -m window --focus south"] :dvorak]

        ]}
       {:des "make russian cmd shortcuts follow dvorak"
        :rules [:russian
                [:!Cslash :!Cz]
                [:!Qslash :!Qz]
                [:!Cb :!Cx]
                [:!Qb :!Qx]
                [:!Ci :!Cc]
                [:!Qi :!Qc]
                [:!Cperiod :!Cv]
                [:!Qperiod :!Qv]
                [:!Ccomma :!Cw]
                [:!Qcomma :!Qw]
                [:!Ck :!Ct]
                [:!Qk :!Qt]
        ]}
       {:des "space cadet shift"
        :rules [
                ; Shifts -> ()
                [:##left_shift :left_shift nil {:alone [:!S9]}]
                [:##right_shift :right_shift nil {:alone [:!S0]}]
                [:!S9 :vk_none]
                [:!S0 :vk_none]

                ; Commands -> <> (but dont disable in russian layout)
                [:##left_command :left_command [:!dvorak] {:alone [:!Scomma]}]
                [:##right_command :right_command [:!dvorak] {:alone [:!Speriod]}]
                [:!Scomma :vk_none [:us]]
                [:!Speriod :vk_none [:us]]
                ; same for dvorak
                [:##left_command :left_command [:dvorak] {:alone [:!Sw]}]
                [:##right_command :right_command [:dvorak] {:alone [:!Se]}]

                ; Ctrl, Alt -> {} (but dont disable in russian layout)
                [:##left_control :left_control [:apple :!dvorak] {:alone [:!Sopen_bracket]}]
                [:##right_option :right_option [:apple :!dvorak] {:alone [:!Sclose_bracket]}]
                [:!Sopen_bracket :vk_none [:us :!dvorak]]
                [:!Sclose_bracket :vk_none [:us :!dvorak]]
                ; same for kinesis but v1 only has left option and right control -_-
                [:##right_control :right_control [:!apple :!dvorak] {:alone [:!Sopen_bracket]}]
                [:##left_option :left_option [:!apple :!dvorak] {:alone [:!Sclose_bracket]}]
                ; same for dvorak
                [:##left_control :left_control [:apple :dvorak] {:alone [:!Shyphen]}]
                [:##right_option :right_option [:apple :dvorak] {:alone [:!Sequal_sign]}]
                [:##right_control :right_control [:!apple :dvorak] {:alone [:!Shyphen]}]
                [:##left_option :left_option [:!apple :dvorak] {:alone [:!Sequal_sign]}]

                ; make ' and " be both single-key, and on the left and right side respectively
                [:!Squote :vk_none [:us]]
                ; apple
                [:quote :!Squote [:us :apple]]
                [:quote :!Sq [:dvorak :apple]]
                [:##left_option :left_option [:apple :!dvorak] {:alone [:quote]}]
                [:##left_option :left_option [:apple :dvorak] {:alone [:q]}]
                ; kinesis
                [:##down_arrow :!Squote [:!apple :!dvorak]]
                ; same on dvorak
                [:##down_arrow :!Sq [:!apple :dvorak]]
                [:quote :q [:!apple :dvorak]]

                ; switch /= and [] on dvorak
                [:##close_bracket :equal_sign [:dvorak]]
                [:##open_bracket :hyphen [:dvorak]]
                [:##equal_sign :close_bracket [:dvorak]]
                [:##hyphen :quote [:dvorak :!apple]]
                [:##q :open_bracket [:dvorak]]

                ; make apple keyboard more like kinesis
                [:##grave_accent_and_tilde :hyphen [:apple :!dvorak]]
                [:##grave_accent_and_tilde :quote [:apple :dvorak]]
                [:##hyphen :grave_accent_and_tilde :apple]

                ; disable left shifts for left half of keyboard
                [:!Sq :vk_none] [:!Sw :vk_none] [:!Se :vk_none] [:!Sr :vk_none] [:!St :vk_none] [:!Sa :vk_none] [:!Ss :vk_none] [:!Sd :vk_none] [:!Sf :vk_none] [:!Sg :vk_none] [:!Sz :vk_none] [:!Sx :vk_none] [:!Sc :vk_none] [:!Sv :vk_none] [:!Sb :vk_none] [:!S1 :vk_none] [:!S2 :vk_none] [:!S3 :vk_none] [:!S4 :vk_none] [:!S5 :vk_none]
                ; disable right shifts for right half of keyboard
                [:!Ry :vk_none] [:!Ru :vk_none] [:!Ri :vk_none] [:!Ro :vk_none] [:!Rp :vk_none] [:!Rh :vk_none] [:!Rj :vk_none] [:!Rk :vk_none] [:!Rl :vk_none] [:!Rn :vk_none] [:!Rm :vk_none] [:!R6 :vk_none] [:!R7 :vk_none] [:!R8 :vk_none] [:!R9 :vk_none] [:!R0 :vk_none] [:!Rperiod :vk_none] [:!Rcomma :vk_none]
        ]}
       {:des "chrome-specific bindings"
        :rules [:Chromes
        ]}
       {:des "slack-specific bindings"
        :rules [:Slack
        ]}
       {:des "caps lock -> esc if alone, hyper if used as a modifier"
        :rules [:caps-mode
        ]}
       {:des "essential movements"
         :rules [:space-mode
                 [:p :right_arrow]
                 [:j :left_arrow]
                 [:c :down_arrow]
                 [:v :up_arrow]
                 [:!Sp :!Sright_arrow]
                 [:!Sj :!Sleft_arrow]
                 [:!Sc :!Sdown_arrow]
                 [:!Sv :!Sup_arrow]

                 [:d :!Oright_arrow]
                 [:n :!Oleft_arrow]
                 [:!Rd :!SOright_arrow]
                 [:!Rn :!SOleft_arrow]

                 [:0 :!Cleft_arrow]
                 [:4 :!Cright_arrow]
                 [:f :page_up]
                 [:h :page_down]
                 [:u :home]
                 [:delete_or_backspace :!Odelete_or_backspace]
                 ;[:return_or_enter :delete_forward]
                 [:return_or_enter :!Creturn_or_enter]
                 ;[:tab [:alfred "clear" "com.alfredapp.jmarcon.clearallnotifications"]]

                 [:g :select_ru]
                 [:a :select_dvorak]
                 [:q :select_us]

                 ; move stuff back and forth
                 ; [] for workspaces
                 [:open_bracket :!Wleft_arrow]
                 [:close_bracket :!Wright_arrow]
                 [:down_arrow :!Wdown_arrow]
                 [:quote :!Wup_arrow]

                 ; io + we for going forward and back for slack, chrome, etc
                 ; --- Chrome
                 [:i :!CShyphen [:Chromes :dvorak]]
                 [:o :!CSequal_sign [:Chromes :dvorak]]
                 [:w :!Chyphen [:Chromes :dvorak]]
                 [:e :!Cequal_sign [:Chromes :dvorak]]

                 [:i :!CSopen_bracket [:Chromes :russian]]
                 [:o :!CSclose_bracket [:Chromes :russian]]
                 [:w :!Copen_bracket [:Chromes :russian]]
                 [:e :!Cclose_bracket [:Chromes :russian]]

                 ; --- Slack
                 [:w :!Chyphen [:Slack :dvorak]]
                 [:e :!Cequal_sign [:Slack :dvorak]]
                 [:i :!CShyphen [:Slack :dvorak]]
                 [:o :!CSequal_sign [:Slack :dvorak]]

                 [:w :!Copen_bracket [:Slack :russian]]
                 [:e :!Cclose_bracket [:Slack :russian]]
                 [:i :!CSopen_bracket [:Slack :russian]]
                 [:o :!CSclose_bracket [:Slack :russian]]

                 ; --- Discord
                 [:i :!CShyphen [:Discord :dvorak]]
                 [:o :!CSequal_sign [:Discord :dvorak]]
                 [:w :!COup_arrow [:Discord :dvorak]]
                 [:e :!COdown_arrow [:Discord :dvorak]]

                 [:i :!CSopen_bracket [:Discord :russian]]
                 [:o :!CSclose_bracket [:Discord :russian]]
                 [:w :!COup_arrow [:Discord :russian]]
                 [:e :!COdown_arrow [:Discord :russian]]

                 ; --- Finder
                 [:i :!Chyphen [:Finder :dvorak]]
                 [:o :!Cequal_sign [:Finder :dvorak]]
                 ; go up to parent dir
                 [:e :!Cup_arrow [:Finder :dvorak]]

                 [:i :!Copen_bracket [:Finder :russian]]
                 [:o :!Cclose_bracket [:Finder :russian]]
                 ; go up to parent dir
                 [:e :!Cup_arrow [:Finder :russian]]

                 ; vimac activate snippets mode
                 [:s :!!s [:!Emacs :!Chromes]]

                 ; find chat
                 [:y :!Cv [:Telegram :dvorak]]
                 [:y :!Ck [:Telegram :russian]]
                 [:y :!Cv [:Slack :dvorak]]
                 [:y :!Ck [:Slack :russian]]
                ]}
      {:des "essential movements - emacs flavor"
         :rules [:emacs-space-mode
                 ; avy-goto-char-2 in Emacs
                 [:s :!OTCs]
                 ;[:s [:g :s :spacebar]]
                ]}
       {:des "essential movements - chrome flavor"
         :rules [:chrome-space-mode
                 ; tab search in Chrome
                 [:y :!CSa]
                 ; to previous tab - relies on Previous Tab extension
                 [:tab :!Tx]
                 ; Vimium in Chrome
                 [:s :y]
                ]}
       {:des "finder"
         :rules [:f-mode
                [:8 [:open_app "Finder"]]
                [:i [:focus_desktop 2]]
         ]}
       {:des "exo"
          :rules [:z-mode
                  [:8 [:open_app "Emacs"]]
                  [:i [:focus_desktop 10]]
                  [:9 [:open_app "Todoist"]]
                  [:o [:focus_desktop 7]]
                  ;[:u [:emacs "@work"]]
                  ;[:!Sequal_sign [:send_to_desktop 14]]
                  ; Ω
                  [:x :!Oz [:!dvorak]]
                  [:x :!Oslash [:dvorak]]
                  ; §
                  [:c :!O6]
                  ; ∞
                  [:v :!O5]
                ]}
       {:des "database"
          :rules [:d-mode
                  [:7 [:open_app "MySQLWorkbench"]]
                  [:u [:focus_desktop 8]]
                  ;[:!Sequal_sign [:send_to_desktop 13]]
                ]}
       {:des "chats"
          :rules [:w-mode
                  [:6 [:open_app "zoom.us"]]
                  [:y [:focus_desktop 13] ["two screens" 1]]
                  [:y [:focus_desktop 12] ["two screens" 0]]
                  [:7 [:open_app "Slack"]]
                  [:u [:focus_desktop 14] ["two screens" 1]]
                  [:u [:focus_desktop 13] ["two screens" 0]]
                  [:8 [:open_app "Telegram"]]
                  [:i [:focus_desktop 15] ["two screens" 1]]
                  [:i [:focus_desktop 14] ["two screens" 0]]
                  [:9 [:open_app "Discord"]]
                  [:o [:focus_desktop 16] ["two screens" 1]]
                  [:o [:focus_desktop 15] ["two screens" 0]]
                  [:0 [:open_app "Skype"]]
                  [:p [:focus_desktop 17] ["two screens" 1]]
                  [:p [:focus_desktop 16] ["two screens" 0]]
                  [:delete_or_backspace  [:open_app "Messenger"] :apple]
                  [:equal_sign [:open_app "Messenger"] :!apple]
                  [:backslash [:focus_desktop 18] ["two screens" 1]]
                  [:backslash [:focus_desktop 17] ["two screens" 0]]
                ]}
       {:des "terminal"
          :rules [:x-mode
                  [:8 [:open_app "kitty"]]
                  [:i [:focus_desktop 12] ["two screens" 1]]
                  [:i [:focus_desktop 11] ["two screens" 0]]
                  ;[:!Sequal_sign [:send_to_desktop 15]]

                  ; fzf cd
                  [:h [:escape :i] [:!us :Kitty]]
                  ; fzf find-file
                  [:y :!Tk [:!us :Kitty]]
                ]}
       {:des "spotify"
          :rules [:s-mode
                  [:8 [:open_app "Spotify"]]
                  [:i [:focus_desktop 19] ["two screens" 1]]
                  [:i [:focus_desktop 18] ["two screens" 0]]

                  [:semicolon [:alfred "add_current_track_to_alfred_playlist_or_your_music" "com.vdesabou.spotify.mini.player"]] ; Add song to Likes playlist
                  [:quote [:alfred "remove_current_track_from_alfred_playlist_or_your_music" "com.vdesabou.spotify.mini.player"]] ; Add song to Likes playlist
                  [:k [:alfred "volume_up" "com.vdesabou.spotify.mini.player"]]
                  [:j [:alfred "volume_down" "com.vdesabou.spotify.mini.player"]]
                  [:l [:alfred "next" "com.vdesabou.spotify.mini.player"]]
                  [:h [:alfred "prev" "com.vdesabou.spotify.mini.player"]]

                  [:y [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player"]]
                  [:u [:alfred "remove_current_track_from" "com.vdesabou.spotify.mini.player"]]
                  [:p [:alfred "show_playlists" "com.vdesabou.spotify.mini.player"]]

                  [:spacebar [:alfred "playpause" "com.vdesabou.spotify.mini.player"]]

                  [:6 [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:2oIXR7f2gv55ud3RbOW4vn"]] ; Depth
                  [:9 [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:1kpoYbaRkk0ZQxWn3a6vdF"]] ; Anime Openings
                  [:0 [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:6lHWoB4CVNlSFKDJOZdatF"]] ; Anime Openings
                  [:equal_sign [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:37i9dQZEVXcBYxUH6cwJch"]] ; Discover Weekly

                  ;[:!Sequal_sign [:send_to_desktop 11]]
                ]}
       {:des "chrome"
          :rules [:c-mode
                  [:8 [:open_app "Google Chrome"]]
                  [:i [:focus_desktop 5]]
                  [:7 [:open_app "Google Chrome"]]
                  [:u [:focus_desktop 4]]

                  ; [:j [:km "grail: open console"]]
                  ; TODO: figure out how to find Chrome's desktop & how to bind it to Shift-c-=)
                  ; [:!Sequal_sign [:send_to_desktop 16]]
                  ]}
]}
